import { Device } from "vrack2-core";
import BasicPort from "vrack2-core/lib/ports/BasicPort";
import BasicType from "vrack2-core/lib/validator/types/BasicType";
import IApiKey from "./interfaces/IApiKey";
/**
 * Access Key Manager.
 *
 * Allows you to add/remove/receive access keys for VRack2
 * Guard also uses this device to reconcile and authorize keys
*/
export default class KeyManager extends Device {
    outputs(): {
        [key: string]: BasicPort;
    };
    checkOptions(): {
        [key: string]: BasicType;
    };
    /**
     * Path to the key file - it is better to define it once and use it once
    */
    protected keysFilePath: string;
    /** List of access keys */
    protected keys: Array<IApiKey>;
    process(): void;
    /**
     * Returns a list of all access keys along with private keys
    */
    apiKeyList(): Promise<IApiKey[]>;
    /**
     * Request to add a new key. The key is generated by itself.
     * You can only assign a level, name and description.
     * The last flag can be used to specify that VRack2 generates a private key
     *
     * @see KeyManager.process() Register command apiKeyAdd
    */
    apiKeyAdd(data: {
        level: number;
        name: string;
        description: string;
        cipher: boolean;
    }): Promise<IApiKey>;
    /**
     * Return full key info by key
     * This command is completely internal and is only used in Guard
     * Note - registration of this command has access level - 0 and can only be called inside VRack2
     *
    */
    apiKey(data: {
        key: string;
    }): Promise<IApiKey>;
    /**
     * Allows you to update the readable name and description of a key by its ID
     * @return {string} 'success'
    */
    apiKeyUpdate(data: {
        id: string;
        name: string;
        description: string;
    }): Promise<string>;
    /**
     * Deletes a key from the key list
     * @return {string} 'success'
    */
    apiKeyDelete(data: {
        id: string;
    }): Promise<string>;
    /**
     * Loading keys from a key file
     *
     * @see KeyManager.checkOptions
     */
    protected loadKeys(): void;
    /**
     * Find key by id
    */
    protected getKey(id: string): false | IApiKey;
    /**
     * Write (update) keys file
    */
    protected syncKeys(): void;
    /**
     * Generates a random string
     *
     * @param length Number of character pairs
    */
    protected uid(length: number): string;
}
